/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, ExecuteMsg, QueryMsg, Addr, Timestamp, Uint64, GlobalState, TupleOfUint128AndUint128, Params, UserState } from "./SenseifiStakingPool.types";
export interface SenseifiStakingPoolReadOnlyInterface {
  contractAddress: string;
  getAdmin: () => Promise<Addr>;
  getParams: () => Promise<Params>;
  getGlobalState: () => Promise<GlobalState>;
  getUserState: ({
    user
  }: {
    user: string;
  }) => Promise<UserState>;
  getLatestReward: ({
    user
  }: {
    user: string;
  }) => Promise<TupleOfUint128AndUint128>;
}
export class SenseifiStakingPoolQueryClient implements SenseifiStakingPoolReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAdmin = this.getAdmin.bind(this);
    this.getParams = this.getParams.bind(this);
    this.getGlobalState = this.getGlobalState.bind(this);
    this.getUserState = this.getUserState.bind(this);
    this.getLatestReward = this.getLatestReward.bind(this);
  }

  getAdmin = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin: {}
    });
  };
  getParams = async (): Promise<Params> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_params: {}
    });
  };
  getGlobalState = async (): Promise<GlobalState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_global_state: {}
    });
  };
  getUserState = async ({
    user
  }: {
    user: string;
  }): Promise<UserState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_state: {
        user
      }
    });
  };
  getLatestReward = async ({
    user
  }: {
    user: string;
  }): Promise<TupleOfUint128AndUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_latest_reward: {
        user
      }
    });
  };
}
export interface SenseifiStakingPoolInterface extends SenseifiStakingPoolReadOnlyInterface {
  contractAddress: string;
  sender: string;
  stake: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unstake: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewards: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  supplyRewards: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setRewardRate: ({
    primaryRewardRate,
    secondaryRewardRate
  }: {
    primaryRewardRate: Uint128;
    secondaryRewardRate: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SenseifiStakingPoolClient extends SenseifiStakingPoolQueryClient implements SenseifiStakingPoolInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claimRewards = this.claimRewards.bind(this);
    this.supplyRewards = this.supplyRewards.bind(this);
    this.setRewardRate = this.setRewardRate.bind(this);
  }

  stake = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake: {}
    }, fee, memo, funds);
  };
  unstake = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unstake: {
        amount
      }
    }, fee, memo, funds);
  };
  claimRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards: {}
    }, fee, memo, funds);
  };
  supplyRewards = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      supply_rewards: {}
    }, fee, memo, funds);
  };
  setRewardRate = async ({
    primaryRewardRate,
    secondaryRewardRate
  }: {
    primaryRewardRate: Uint128;
    secondaryRewardRate: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_reward_rate: {
        primary_reward_rate: primaryRewardRate,
        secondary_reward_rate: secondaryRewardRate
      }
    }, fee, memo, funds);
  };
}