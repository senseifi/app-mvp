/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {
  Uint64,
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  QueryMsg,
  Addr,
  GameState,
  Timestamp,
  GlobalState,
  Params,
  UserState,
  ArrayOfAddr,
} from "./SenseifiStakingNll.types";
export interface SenseifiStakingNllReadOnlyInterface {
  contractAddress: string;
  getAdmin: () => Promise<Addr>;
  getParams: () => Promise<Params>;
  getGlobalState: () => Promise<GlobalState>;
  getGameState: ({ gameId }: { gameId: Uint128 }) => Promise<GameState>;
  getUserState: ({ user }: { user: string }) => Promise<UserState>;
  getTotalRewards: () => Promise<Uint128>;
  getUsersAsc: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Addr;
  }) => Promise<ArrayOfAddr>;
  getUsersDesc: ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Addr;
  }) => Promise<ArrayOfAddr>;
}
export class SenseifiStakingNllQueryClient
  implements SenseifiStakingNllReadOnlyInterface
{
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAdmin = this.getAdmin.bind(this);
    this.getParams = this.getParams.bind(this);
    this.getGlobalState = this.getGlobalState.bind(this);
    this.getGameState = this.getGameState.bind(this);
    this.getUserState = this.getUserState.bind(this);
    this.getTotalRewards = this.getTotalRewards.bind(this);
    this.getUsersAsc = this.getUsersAsc.bind(this);
    this.getUsersDesc = this.getUsersDesc.bind(this);
  }

  getAdmin = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_admin: {},
    });
  };
  getParams = async (): Promise<Params> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_params: {},
    });
  };
  getGlobalState = async (): Promise<GlobalState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_global_state: {},
    });
  };
  getGameState = async ({
    gameId,
  }: {
    gameId: Uint128;
  }): Promise<GameState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_game_state: {
        game_id: gameId,
      },
    });
  };
  getUserState = async ({ user }: { user: string }): Promise<UserState> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_user_state: {
        user,
      },
    });
  };
  getTotalRewards = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_total_rewards: {},
    });
  };
  getUsersAsc = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Addr;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_users_asc: {
        limit,
        start_after: startAfter,
      },
    });
  };
  getUsersDesc = async ({
    limit,
    startAfter,
  }: {
    limit?: number;
    startAfter?: Addr;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_users_desc: {
        limit,
        start_after: startAfter,
      },
    });
  };
}
export interface SenseifiStakingNllInterface
  extends SenseifiStakingNllReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: (
    {
      admin,
    }: {
      admin: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setUnbondInterval: (
    {
      minUnbondIntervalSec,
    }: {
      minUnbondIntervalSec: Uint64;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setWinner: (
    {
      winner,
    }: {
      winner: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  redelegate: (
    {
      validator,
    }: {
      validator: string;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  unbond: (
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  stake: (
    {
      nonWinner,
    }: {
      nonWinner: boolean;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  unstake: (
    {
      amount,
    }: {
      amount: Uint128;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  claimPrize: (
    {
      gameId,
    }: {
      gameId: Uint128;
    },
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
  claimUnstake: (
    fee?: number | StdFee | "auto",
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class SenseifiStakingNllClient
  extends SenseifiStakingNllQueryClient
  implements SenseifiStakingNllInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.setUnbondInterval = this.setUnbondInterval.bind(this);
    this.setWinner = this.setWinner.bind(this);
    this.redelegate = this.redelegate.bind(this);
    this.unbond = this.unbond.bind(this);
    this.stake = this.stake.bind(this);
    this.unstake = this.unstake.bind(this);
    this.claimPrize = this.claimPrize.bind(this);
    this.claimUnstake = this.claimUnstake.bind(this);
  }

  setAdmin = async (
    {
      admin,
    }: {
      admin: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          admin,
        },
      },
      fee,
      memo,
      funds
    );
  };
  setUnbondInterval = async (
    {
      minUnbondIntervalSec,
    }: {
      minUnbondIntervalSec: Uint64;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_unbond_interval: {
          min_unbond_interval_sec: minUnbondIntervalSec,
        },
      },
      fee,
      memo,
      funds
    );
  };
  setWinner = async (
    {
      winner,
    }: {
      winner: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_winner: {
          winner,
        },
      },
      fee,
      memo,
      funds
    );
  };
  redelegate = async (
    {
      validator,
    }: {
      validator: string;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        redelegate: {
          validator,
        },
      },
      fee,
      memo,
      funds
    );
  };
  unbond = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        unbond: {},
      },
      fee,
      memo,
      funds
    );
  };
  stake = async (
    {
      nonWinner,
    }: {
      nonWinner: boolean;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        stake: {
          non_winner: nonWinner,
        },
      },
      fee,
      memo,
      funds
    );
  };
  unstake = async (
    {
      amount,
    }: {
      amount: Uint128;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        unstake: {
          amount,
        },
      },
      fee,
      memo,
      funds
    );
  };
  claimPrize = async (
    {
      gameId,
    }: {
      gameId: Uint128;
    },
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        claim_prize: {
          game_id: gameId,
        },
      },
      fee,
      memo,
      funds
    );
  };
  claimUnstake = async (
    fee: number | StdFee | "auto" = "auto",
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        claim_unstake: {},
      },
      fee,
      memo,
      funds
    );
  };
}
